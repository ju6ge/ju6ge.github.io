<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Felix Richter Website</title>
  <link href="https://www.felixrichter.tech/feed.xml" rel="self"/>
  <link href="https://www.felixrichter.tech/"/>
  <updated>2020-01-29T00:00:00+00:00</updated>
  <id>https://www.felixrichter.tech/</id>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[Using Boundary Scan for PCB debugging]]></title>
    <link href="https://www.felixrichter.tech/posts/jtaghardwaredebugging/"/>
    <id>https://www.felixrichter.tech/posts/jtaghardwaredebugging/</id>
    <author>
      <name>Felix Richter</name>
    </author>
	<published>2020-01-29T00:00:00+00:00</published>
	<updated>2020-01-29T00:00:00+00:00</updated>
	<content type="html"><![CDATA[<p>I did a seminar talk on JTAG and how to use it to check a PCB for errors. For
this i designed a little board in order to simulate manufacturing errors. In this
post I want to give you a short introduction to JTAG and how to use it.</p>
<h1 id="what-is-boundary-scan">What is Boundary-scan</h1>
<p>Boundary-scan was developed to simplify testing of integrated circuits. To do this
the Joint Test Action Group introduced the Boundary Scan architecture as a standard
and today it has replaced the old testing methods because of its cost efficiency and speed
up of test development and execution.</p>
<h3 id="so-how-does-this-work">So how does this work?</h3>
<p>I will be just covering the basics here. If you want a more detailed introduction, you can read the articles referenced
at the end of this post.</p>
<p>Boundary-scan is a technology which places cells at the circuits boundary that can sample the circuit inputs and
also drive its outputs. This can be done while the circuit is operating and it is controlled via the JTAG interface.
With these cells in place we wan test the internal logic of the circuit as well as the interconnects between
the devices on a board.</p>
<figure>
    <img src="/jtag_debug/bs_register.png" width="400"/> 
</figure>

<p>In the picture above you can see an overview of the boundary-scan architecture. This picture only shows one JTAG device, but
on more complex PCB there are many such devices that are connected in a JTAG chain. This means that the data out of one
chip is connected to the input of the next.</p>
<p>In order for us use this architecture, we need to connect to the four JTAG pins:</p>
<ul>
<li><strong>TDI</strong> Test Data In</li>
<li><strong>TDO</strong> Test Data Out</li>
<li><strong>TCK</strong> Test Clock</li>
<li><strong>TMS</strong> Test Mode Select</li>
</ul>
<p>Once connected we can control all of the devices in the JTAG chain. In general we can perform two different types
of actions. We can either write/read data or we can write instructions. Testing a circuit involves both of theses
actions. By writing instructions we can set the connected circuits into different modes. And by writing data
we can set the pins to the desired levels as well as read the results.</p>
<p>There are three different instructions we are interested in when testing interconnects:</p>
<ul>
<li><strong>SAMPLE/PRELOAD</strong></li>
<li><strong>EXTEST</strong></li>
<li><strong>BYPASS</strong></li>
</ul>
<p>With the <strong>SAMPLE/PRELOAD</strong> instruction the boundary-scan cells will sample the inputs of the circuit, and when shifting in
data we can read values received at the pins. We can also use this command to load data into the boundary-scan cells. The
<strong>EXTEST</strong> instruction will set the output of the pins to the values provided in the boundary-scan cells and the <strong>BYPASS</strong>
instruction lets us skip devices in the chain that are not of interest to the test currently performed.</p>
<p>With these instructions we can set pins of a device to a logic level and test at the receiving circuit if the correct logic
level was received.</p>
<h1 id="the-hardware">The Hardware</h1>
<p>We need to connect to the JTAG pins of a devices. If they are exposed there probably is a connector on the board. If not it may
be possible to solder wires directly to the pins. In any case we will need a JTAG adapter in order to connect them to a normal
computer via USB. I am using a JLink adapter which features a 20 pin JTAG connector.</p>
<p>The PCB I am using for testing is a small circuit I designed myself, it also has a 20 pin connector which exposes the JTAG pins.
Here is the layout:</p>
<figure>
    <img src="/jtag_debug/board_schem.png" width="600"/> 
</figure>

<p>It features two MAX V Altera CPLDs that implement the boundary-scan architecture and are connected in a JTAG chain.
To test some connections between them I connected eight of their pins at the top and added a dip switch to simulate
shorts between the wires as well as pull ups and pull downs.</p>
<h1 id="tooling">Tooling</h1>
<p>Okay so we got a PCB and connected it to a computer with a JTAG adapter now what? How do get the tests running?</p>
<p>Well this is where it gets hard, because there is no nice open source software that does it all for us. We need to write the
test ourselves and for that we need to know the details of the interconnects on our PCB and the details of how the boundary-scan
architecture is implemented in the devices in our JTAG chain.</p>
<h2 id="bsdl-files">BSDL Files</h2>
<p>The Boundary-scan standard does not tell manufacturers what bit codes to use to encode the instructions, but it does require
them to publish the so called BSDL (Boundary Scan Description Language) files free of charge for their devices. These files
use a dialect derived from VHDL a hardware description language and describe all information needed to use a devices
boundary-scan architecture. For example:</p>
<ul>
<li>Instruction register description</li>
<li>Boundary-scan cell description</li>
<li>Pin mappings</li>
<li>and more</li>
</ul>
<p>Basically all information we might want to know about a specific device is in that file.</p>
<h2 id="svf-files">SVF Files</h2>
<p>Most JTAG adapter tool chains support a file format called SVF (Serial Vector Format). These are plain text files that describe
what data or instructions to write to the JTAG connection. It has no knowledge about the JTAG chain of devices or any of
there properties. We can just specify what data/instructions to shift in and what results we expect to be shifted out.</p>
<h2 id="designing-a-simple-test">Designing a simple test</h2>
<p>Okay so putting it all together. Lets say we want to test two neighboring interconnects for a bridging fault.</p>
<p>On my example PCB two neighboring interconnects are connected as follows:</p>
<ol>
<li>CHIP 1 <strong>IO56</strong> -  CHIP 2 <strong>IO49</strong></li>
<li>CHIP 1 <strong>IO55</strong> -  CHIP 2 <strong>IO50</strong></li>
</ol>
<p>So if we set <strong>IO56</strong> of the first chip to a logic 1 and <strong>IO55</strong> to logic 0, we would expect to receive a logic 1 on <strong>IO49</strong>
and a logic 0 at <strong>IO50</strong> on the second chip. If we receive a logic 1 at <strong>IO50</strong> that means that there is a bridging fault between
the interconnects.</p>
<p>To write a test for this we need to write an SVF file that we can run with the JTAG adapter tool chain. It needs to complete the
following steps:</p>
<ol>
<li>Set first chip into <strong>SAMPLE/PRELOAD</strong> mode. (Shift in Instructions)</li>
<li>Load Test pattern into first chip (Shift in Data)</li>
<li>Set first chip to <strong>EXTEST</strong> and second chip to <strong>SAMPLE/PRELOAD</strong> mode (Shift in Instructions)</li>
<li>Shift in dummy data to receive the data sampled from chip 2 and compare against the expected result (Shift in Data)</li>
</ol>
<p>The following SVF files does exactly this:</p>
<pre><code class="language-svf" data-lang="svf">TRST OFF;
ENDIR IDLE;
ENDDR IDLE;
STATE RESET;
STATE IDLE;
FREQUENCY 10000000 HZ;
SIR 20 TDI (01405);
SDR 480 TDI (000000000000000000000000000000000000000000800000000000000
	000000000000000000000000000000000000000000000000000000000000000);
SIR 20 TDI (03c05);
SDR 480 TDI (0) TDO (000000000000000000000000000000000000000000000000
	00000000000000000000000000000000000000000000000100000000000000000
	0000000) MASK (00000000000000000000000000000000000000000000000000
	00000000000000000000000000000000000000000000012000000000000000000
	00000);
</code></pre><p>Up until the first line starting with <em>SIR</em> all we are doing is making sure the boundary-scan circuit is in a known state and setting the
speed at which we want to operate.</p>
<p><strong>SIR</strong> means we want to write instruction data. We need to specify the length and since we have to chips with both 10 bit instruction registers
we are writing 20 bits of data. The data we want to write is specified behind the <em>TDI</em> statement as a hex string surrounded by parenthesis.</p>
<p><strong>SDR</strong> works the same as <em>SIR</em> but instead of instruction data we are just writing data. In this case we are writing 480 bits, since
both chips have a boundary-scan register length of 240 bits. If we want to compare the shifted out data against the expected data
we have to write the expected result as a hex string behind the <em>TDO</em> statement and we can even mask the result so that we only look
at the bits we are interested in.</p>
<p>How do we know what data to write and what data to expect? Well for that we have to look at the BSDL files of the devices in our
JTAG chain and figure out which pin is mapped to which bit in the data. Of course writing a SVF by hand is very tedious, so instead
I created some <a href="https://github.com/ju6ge/jtag_testing">python scripts</a> to help me with the task. Feel free to use them for your
own projects.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Using Boundary-scan for PCB testing is very nice when trying to automatically test PCBs. Sadly there is little to no open source
software which makes it easy to design tests for your own layouts. Which means that you still have to do a lot of information gathering
if you want to use this technology. But once the tests are implemented testing a PCB becomes a very easy and fast.</p>
<p>I hope this blog post gave you an idea of what you need to do, to get up and running with boundary-scan testing. If you have any feedback
feel free to contact me.</p>
<h3 id="further-reading-material">Further Reading Material</h3>
<ul>
<li><a href="http://www.ti.com/lit/an/ssya002c/ssya002c.pdf">Texas Instruments Testabilty Primer</a></li>
<li><a href="https://pdfs.semanticscholar.org/9acb/ea9b3ddd1a80a01434d32912821837bd9af3.pdf">Paper on Interconnect Testing</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Introduction to Hardware Peripherals]]></title>
    <link href="https://www.felixrichter.tech/posts/hardwareperipherals/"/>
    <id>https://www.felixrichter.tech/posts/hardwareperipherals/</id>
    <author>
      <name>Felix Richter</name>
    </author>
	<published>2019-12-27T00:00:00+00:00</published>
	<updated>2019-12-27T00:00:00+00:00</updated>
	<content type="html"><![CDATA[<p>Lately I have been doing programming for embedded systems such as the
esp32 and esp8266, and additionally I did a course on embedded systems for
my masters degree. This introduced me to the wonderful world of programming
close to the hardware level, and inspired me to write this post about
hardware peripherals.</p>
<h1 id="what-are-hardware-peripherals">What are Hardware Peripherals?</h1>
<p>Hardware Peripherals are specialized pieces of silicon that are built into
a processor. They are used to perform a diverse set of task. This includes
controlling the processors clock speed, power management and communication
with other devices. They are responsible for configuring the device operation
and during operation are used to perform tasks in parallel with the main
cores.</p>
<h4 id="so-what-can-these-peripherals-do">So what can these peripherals do?</h4>
<p>Anyone who has ever looked into the data sheet of a microprocessor will know
that these data sheets are long. The data sheet for the ARM cortex m7 CPU for
example is about 2000 pages long. Which is to say that there are a lot of
peripherals that can do a variety of things, for example:</p>
<ul>
<li><strong>Analog Digital Converters (ADC)</strong> used for measuring analog signals</li>
<li><strong>Direct Memory Access Controllers (DMA)</strong> used for copying data from sensor to memory or the other way</li>
<li><strong>GPIO Interfaces</strong> used for pin management</li>
<li><strong>I2C and SPI Interfaces</strong> used for communicating with sensor devices</li>
<li><strong>PMC</strong> the power management controller</li>
<li>Other Memory interfaces such as PCI or EBI</li>
</ul>
<h1 id="using-peripherals">Using Peripherals</h1>
<p>In order for us to use a peripheral, we have to complete a few steps:</p>
<ol>
<li>
<p>Setup peripheral mode</p>
</li>
<li>
<p>Start peripheral task</p>
</li>
<li>
<p>Wait for peripheral to finish</p>
</li>
</ol>
<p>All of this is done via memory mapped registers, which is to say that
within the memory range of the processor there are dedicated areas of memory
that do not map to a memory controller like an SDRAM, but are mapped to
registers belonging to the peripherals. The peripherals use these registers
as configuration values that change how the peripheral is working or if it
is running, and some of the registers are not meant to be written to but
instead are used to communicate the status of the peripheral back to the CPU.</p>
<p>All of this is described in the data sheet of the processor you are using. Every
peripheral has a section describing what it can do, and what parameters can
be changed via the memory mapped registers, as well as how the peripheral
can be started, stopped and how to know when it is finished.</p>
<p>Since all of this is highly dependent on the platform you are using, it is
hard to give you a clear cut way to use any peripheral. You will always have
to refer back to the data sheet and look how to use the peripheral for your
platform. But in order for you to get an idea on how to do this, let us look
at an example.</p>
<h2 id="example">Example</h2>
<p>Every example is specific to the specific device we are using. For
these examples we are going to look at the simple case of toggling
a GPIO pin. The chip we are using is an embedded cortex m7 cpu,
from atmel. It belongs to the atsame70 family of cpu&rsquo;s.
<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/SAM-E70-S70-V70-V71-Family-Data-Sheet-DS60001527D.pdf">Datasheet</a></p>
<p>So all we want to do is let a led blink. To do this we will have to toggle
the status of a pin, and all pins are managed by the GPIO peripheral. In the
data sheet of this particular chip this peripheral is just called PIO. To be
able to do this we first have to tell the PIO peripheral that it should take
control of the pin and then tell it to configure the pin to be used as an
output. After that we can change the pin state.</p>
<p>If you already looked into the data sheet you might have noticed so that there
are multiple PIO peripherals and how the pins are mapped depends on the rest
of the system. For the system that i am programming a led is connected
to pin <strong>19</strong> on PIO <strong>C</strong>. So this is the pin I will be using in this example.</p>
<p>To achive an accurate timeout between turning the led on and off, we are
going to use the real time timer peripheral on our device. It is in essence
a configurable counter attached to a clock signal.</p>
<h3 id="let-us-do-this-in-c">Let us do this in C</h3>
<p>This example uses the C library provided by atmel which provides the correct
memory addresses of the peripherals and exposes them to us as definitions and
structures. By just using these we are automatically writing to the correct
addresses.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">	<span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;atsame70.h&#34; </span><span style="color:#75715e">
</span><span style="color:#75715e"></span>	
	<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">timeout_ms</span>(<span style="color:#66d9ef">int</span> ms) {
		<span style="color:#75715e">// restart timer and set prescaler to count every 32 clock cycles 
</span><span style="color:#75715e"></span>		<span style="color:#75715e">// this corresponds to a 1ms clock cycle since the clock frequency is 32 kHz 
</span><span style="color:#75715e"></span>		RTT<span style="color:#f92672">-&gt;</span>RTT_MR <span style="color:#f92672">=</span> RTT_MR_RTPRES(<span style="color:#ae81ff">0x20</span>) <span style="color:#f92672">|</span> RTT_MR_RTTRST; 
		
		<span style="color:#66d9ef">while</span> ( (RTT<span style="color:#f92672">-&gt;</span>RTT_VR <span style="color:#f92672">|</span> RTT_VR_CRTV_Msk) <span style="color:#f92672">&lt;</span> ms) {
			<span style="color:#75715e">//wait for counter to have counted to desired timeout
</span><span style="color:#75715e"></span>		}
	}

	<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">blink_led</span>() {
		<span style="color:#75715e">//give control of the pin to the pio -&gt; basically the running code
</span><span style="color:#75715e"></span>		ATSAME70_BASE_PIOC<span style="color:#f92672">-&gt;</span>PIO_PER <span style="color:#f92672">=</span> PIO_PC19; 
		ATSAME70_BASE_PIOC<span style="color:#f92672">-&gt;</span>PIO_OER <span style="color:#f92672">=</span> PIO_PC19;

		<span style="color:#66d9ef">while</span>(true) {
			<span style="color:#75715e">//turn led on 
</span><span style="color:#75715e"></span>			ATSAME70_BASE_PIOC<span style="color:#f92672">-&gt;</span>PIO_SODR <span style="color:#f92672">=</span> PIO_PC19;
			
			timeout_ms(<span style="color:#ae81ff">500</span>); 
			
			<span style="color:#75715e">//turn led off 
</span><span style="color:#75715e"></span>			ATSAME70_BASE_PIOC<span style="color:#f92672">-&gt;</span>PIO_CODR <span style="color:#f92672">=</span> PIO_PC19; 
			
			timeout_ms(<span style="color:#ae81ff">500</span>);
		}
}

</code></pre></div><h4 id="timeouts">Timeouts</h4>
<p>Since the device can vary it&rsquo;s clock speed it is not desirable to implement a
delay with just waiting a specified amount of clock cycles. Instead we
are going to use the atsame70 <em>Real Time Timer</em> (RTT).</p>
<p>How to configure the RTT correctly can be read in the functional description in
the data sheet. In short we have to configure the clock source since there are
two at different speeds. Scale how many clock cycles trigger the counter and
reset the peripheral for the new setting to take affect.</p>
<p>To do this we have to write to a memory mapped register:</p>
<figure>
    <img src="/hardware_peripherals/rtt_reg.png"/> 
</figure>

<p>In the figure we can see all the registers that are connected to the RTT. All
the values we need to configure are in the RTT_MR register. It is basically just
a 32 bit value. But every bit has a meaning. The first 16 bits represent the 16
bit prescaler value, and there is also a bit to enable the peripheral and one to
the reset it. Selecting the clock source is also done with one bit.</p>
<p>So what do we need to wait for a certain amount of ms:</p>
<ol>
<li>
<p>Select the 32kHz clock src by setting the <strong>RTC1HZ</strong> bit in <strong>RTT_MR</strong> to <strong>0</strong></p>
</li>
<li>
<p>Setting the <strong>RTPRES</strong> 16 bit value to <strong>32</strong> in order for the counter to increase ever 32 clock cycles
which corresponds to increase the counter value evey 1ms</p>
</li>
<li>
<p>Set the <strong>RTTDIS</strong> bit to <strong>0</strong> to not disable the rtt</p>
</li>
<li>
<p>Trigger the RTT reset by setting <strong>RTTRST</strong> bit to <strong>1</strong></p>
</li>
</ol>
<p>All of these 4 steps can be done with one write to the <strong>RTT_MR</strong> register.</p>
<p>Afterwards the timer is running and we can read the value in <strong>RTT_VR</strong> to see how
much time has passed.</p>
<h4 id="controlling-the-led">Controlling the LED</h4>
<p>The PIO peripheral that manages the pins of the device is a lot more complex than the RTT peripheral. Which
means it has many more registers. Using these we can do fancy things like giving other peripherals such as
the SPI peripheral control over the pins it needs to communicate.</p>
<p>But we are just interested in simply controlling a pin ourselfs. For this we need 4 different registers:</p>
<ol>
<li>
<p><strong>PIO_PER</strong> peripheral enable register</p>
</li>
<li>
<p><strong>PIO_OER</strong> peripheral output enable register</p>
</li>
<li>
<p><strong>PIO_SODR</strong> set output data register</p>
</li>
<li>
<p><strong>PIO_CODR</strong> clear output data register</p>
</li>
</ol>
<p>They all have the same structure so i am just going to show you one of them:</p>
<figure>
    <img src="/hardware_peripherals/pio_reg.png"/> 
</figure>

<p>Basically for every pin controlled by the PIO there is a bit. So one PIO gives us control over 32 pins.
To control a pin we have to do the following steps:</p>
<ol>
<li>
<p>set <strong>PIO_PER</strong> pin bit to <em>1</em> to enable control of the PIO over the pin</p>
</li>
<li>
<p>set <strong>PIO_OER</strong> pin bit to <em>1</em> to set the pin into output mode</p>
</li>
</ol>
<p>Now setting the <strong>PIO_SODR</strong> pin bit to <em>1</em> to pull the pin high and setting the <strong>PIO_CODR</strong> pin bit to <em>1</em> pulls the pin low again.</p>
<h3 id="how-does-all-of-this-look-in-rust">How does all of this look in Rust</h3>
<p>For rust there is no official library from atmel, but there is a project
called svd2rust that allows us to auto-generate a library that we can use
to address the correct peripheral registers. All we need is the svd file of
the processor we are using, this is an xml file describing all the peripherals
and their register values.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rust" data-lang="rust">	<span style="color:#66d9ef">use</span> atsame70q21::{Peripherals}
	
	<span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">timeout_ms</span>(peripherals : <span style="color:#66d9ef">&amp;</span> <span style="color:#a6e22e">Peripherals</span>, <span style="color:#66d9ef">u32</span> ms) {
		<span style="color:#66d9ef">let</span> rtt <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>peripherals.RTT;
		
		<span style="color:#75715e">// restart timer and set prescaler to count every 32 clock cycles 
</span><span style="color:#75715e"></span>		<span style="color:#75715e">// this corresponds to a 1ms clock cycle since the clock frequency is 32 kHz 
</span><span style="color:#75715e"></span>		rtt.rtt_mr.write( <span style="color:#f92672">|</span>w<span style="color:#f92672">|</span> {
			<span style="color:#66d9ef">unsafe</span> {w.rtpres().bits(<span style="color:#ae81ff">0x20</span>);}
			w.rttdis().clearbit();
			w.rttrst().set_bit()
		});
		<span style="color:#66d9ef">while</span> rtt.rtt_vr.read().crtv().bits() <span style="color:#f92672">&lt;</span> ms {
			<span style="color:#75715e">// wait for counter to have counted to desired timeout
</span><span style="color:#75715e"></span>		}
	}

	<span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">blink_led</span>() {
		<span style="color:#66d9ef">let</span> peripherals <span style="color:#f92672">=</span> Peripherals::take().unwrap();
		
		<span style="color:#66d9ef">let</span> pioc <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>peripherals.PIOC;
		
		<span style="color:#75715e">//give control of the pin to the pio -&gt; basically the running code
</span><span style="color:#75715e"></span>		pioc.pio_per.write( <span style="color:#f92672">|</span>w<span style="color:#f92672">|</span> w.p19().set_bit() );
		pioc.pio_oer.write( <span style="color:#f92672">|</span>w<span style="color:#f92672">|</span> w.p19().set_bit() );
		
		<span style="color:#66d9ef">loop</span>() {
			<span style="color:#75715e">//turn led on 
</span><span style="color:#75715e"></span>			pioc.pio_sodr.write( <span style="color:#f92672">|</span>w<span style="color:#f92672">|</span> w.p19().set_bit() );
			
			timeout_ms(<span style="color:#f92672">&amp;</span>peripherals, <span style="color:#ae81ff">500</span>); 
			
			<span style="color:#75715e">//turn led off 
</span><span style="color:#75715e"></span>			pioc.pio_codr.write( <span style="color:#f92672">|</span>w<span style="color:#f92672">|</span> w.p19().set_bit() );
			
			timeout_ms(<span style="color:#f92672">&amp;</span>peripherals, <span style="color:#ae81ff">500</span>);
		}
	}
</code></pre></div><p>The logic of the rust code is exactly the same as the C example, and since all of the actual functionality we are using
is provided by the hardware and not by the language specifics the code looks mostly the same.</p>
<p>I hope you liked this little excursion into bare metal programming, i am sure i will return with more blog post regarding
similar topics while i keep experimenting more with rust on bare metal systems.</p>
]]></content>
  </entry>
</feed>
